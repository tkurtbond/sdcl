###############################################################################
#
# Program:        P I P E S . S D C L
# Written By:     Thomas Kurt Bond
# Version:        2.60a
# Date:           19-Apr-1987
# 
# Description:
# 
# This command procedure implements i/o redirection with UNIX style
# pipes ("|") and input and output file specifiers ("<" and ">"
# respectively).  > is only allowed on the end of a pipeline, and <
# is only  allowed on the beginning of a pipeline. A & at the end
# of the line will cause the pipeline to be spawned.
# 
# You have to specify all values needed by the command, i.e., you
# cannot say "edit" and have the editor ask "_File:" as it does at
# the command line. Another problem: the INQUIRE command reads from
# terminal and does the DCL command line processing on a line,
# which results in changes to uppercase, quotes being removed, etc.
# I've added an escape command, the percent sign %, to allow the next
# line to be read literally without the DCL mangling. After hitting
# %<CR> the prompt will be doubled ("PIPES>>") and this will be
# read exactly as you type it.  Unfortunately, this command will
# not be put in the recall stream, so you can't recall it with the
# up arrow or RECALL.
# 
# If verify is on when PIPES is invoked, PIPES turns it off while in
# PIPES, but turns it on before executing the current command (joint
# of pipe).  If verify was off, but -verify was specified, verify is
# turned on while in PIPES, but turned off before executing the
# current command.  If verify was on, and -verify was specified, verify
# is on throughout the execution of PIPES and all commands it executes.
# 
# With the -INPUT option a file to take the commands from can be specified.
# The file should contain commands on each line, with no leading dollar
# signs, etc. Lines with ! or # at the beginning are comments.  Comments
# can also be indicated by a ! after last command on the line.  Blank
# lines are ignored.
# 
# Parameters:
# command  	-- PIPES [option] "command" will execute the command, unless
#                  an alternate input file was specified, and then exit.
# 
# Options:
# -verify[~]	-- Turn on [off] verify in pipes command procedure
# -testing[~]	-- Turn on [off] the internal debugging commands and output
# -input	-- file to read command lines from
# 
# History:
# Ver     When    Who  What
# 1.00a   121486  tkb  Initial version
# 1.00b   121686  tkb  Add a # so can get line without DCL mangling it.
#                      Help for pipes (?) added.
# 1.00c   012187  tkb  Add & to allow a pipeline to be spawned.
# 2.00a   040887  tkb  redo < and >, add ? (redirection of stderr), change
#                      help to -h and escaped line indicator to %
# 2.50a   041687  tkb  Add >> and ?? (append output to a file).
# 2.60a   041987  tkb  Add read from file, options, and control of set verify.
# 3.0     041189  tkb  Convert to new SDCL syntax.
###############################################################################
   save_verify_env = 'f$verify(f$type(pipes_verify) .nes. "")'
   !> PIPES.SDCL -- UNIX style pipes and i/o redirection
   ##command definitions
   wse           = "write sys$error"
   wso           = "write sys$output"
   inq           = "inquire/nopun"
   udef          = "define/user/nolog"

   ##global constants
   true          = 1 .eq. 1
   false         = .not. true
   debug         = false

   temp_spec     = "sys$scratch:pipes_"
   temp_type     = "tmp"

   is_input_file = false
   error_resume  = "interactive_resume"
   verify        = 0		#normally verify is off

   ##Valid Options List (in uppercase because DCL upcases command line)
   opt_list      = "/INPUT/TESTING/VERIFY/"
   opt_list_len  = f$length(opt_list)

   ##process options till none left
   i = 1
   while (f$extract(0, 1, p'i') .eqs. "-") {
      opt = p'i'
      which = f$extract(1, 3, opt)
      ok = (f$locate("/" + which, opt_list) .ne. opt_list_len) .and. \
           (which .nes. "")
      if (ok)
         gosub OPT$'which'
      else
         wse "pipes: invalid option `", opt, "'"
      i = i + 1
   }

   #Command passed as parameter, execute it and exit
   if (p'i' .nes. "") {
      inl = p'i'
      gosub process_line
      goto The_End
   }

   ##Set up the error handler. Note that the entry from a command line
   ##(above) exits on an error, and does not resume, since it skips
   ##this section.
   ##Should we also exit on error when reading commands from a file?
   ##(we don't now. Could move error trap setup into interactive section)

   on error then goto error_handler
   on control_y then goto error_handler

   ##Main program.  Get a command line and execute it
   if (is_input_file) {			##read command from a file
      file = f$search(input_file)	##make sure input file exists
      if (file .eqs. "") {
         wse "pipes: can't open input file `", input_file, "'"
         goto The_End
      }
      open inf 'file'
      error_resume = "non_interactive_resume" ##resume for non interactive
      done = false
      do {
         read \
            /end_of_file=end_file \
            /prompt="PIPES> " \
            inf \
            inl
         gosub process_line
         non_interactive_resume:
      } while (.not. done)
      end_file:
      close inf
   } else {				#get commands interactively
      ##Identify program
      wso "PIPES -- Enter -h for help.                           ''f$time()'"
      done = false
      do {
         inq inl "PIPES> "
         gosub process_line
         interactive_resume: 		#Come here after an error
      } while (.not. done)
   }

The_End:
   exit (1 .or. (f$verify(save_verify_env) .and. 0))


###############################################################################
####Subroutines
###############################################################################


###On error or control/y reset error traps and then get another command.
error_handler:
   on control_y then goto error_handler
   on error then goto error_handler
   goto 'error_resume'
   ##End of error_handler

###Process a line of input.  Split the line up and do one command at
###a time if several commands are connected by pipes ("|").
process_line:
   line = f$edit(inl, "trim,uncomment")
   if ((f$extract(0, 1, line) .eqs. "#") .or. line .eqs. "") {	
      ##comment or blank line, ignore
      return
   }

   if (f$edit(line, "upcase") .eqs. "EXIT") {
      done = true
      return
   }

   if (line .eqs. "-H") {	#Print help for pipes
      gosub pipes_help_routine
      return
   }

   if (line .eqs. "%") {	#Get a line without DCL mangling it
      ##INQUIRE command upcases, strips whitespace, and removes quotes, just
      ##like DCL. READ doesn't, but line doesn't appear in RECALL list.
      read/prompt="PIPES>> " sys$command line
   }

   if (f$locate("&", line) .eq. f$length(line) - 1) { ##Spawn a pipeline
      ##strip off the ampersand and spawn a new execution of PIPES to
      ##execute the line while we continue go on to something else.
      ##( PIPES should be set up as PIPES :== @dir:pipes )
      line = f$extract(0, f$length(line) -1, line)
      spawn /nowait /notify pipes "''line'"
      return
   }

   ##Chop the line up into joints of pipe and execute each joint in turn.
   ##i is the number of the temp file that holds input.
   ##iplus is the number of the temp file that holds output.
   ##That way, the next time around the loop the old output becomes the
   ##new input, so piping is almost automatic.
   i = 0				#initial number of pipes
   do {
      iplus = i + 1			#Get number to make temp output file
      line_len = f$length(line)
      bar_pos = f$locate("|", line)
      pipe = f$extract(0, bar_pos, line) #Get first command before pipe

      if (bar_pos .ne. line_len) {	#There are more pipes
         ##Remove the current command and pipe from the command line
         line = f$extract(bar_pos + 1, line_len, line)
         more_pipes = true
      } else
         more_pipes = false		#current joint is the last one
      if (debug) {
         wse "Current joint: ", pipe
         wse "Current line:  ", line
      }

      gosub stdin_redirect		#check for i/o redirection of stdin
      gosub stdout_redirect		#check for i/o redirection of stdout
      gosub stderr_redirect		#check for i/o redirection of stderr

      if (is_err_file)			#user specified error output file
         udef sys$error 'err_file'
      if (is_in_file)			#user specified input file
         udef sys$input 'in_file'
      else
         if (i .ge. 1)  #in a pipeline, connect the input to the pipe file
            udef sys$input 'temp_spec''i'.'temp_type'
         else 		#not in a pipeline, connect input to terminal
            udef sys$input sys$command

      if (more_pipes) 	#define a temp file to hold output for next command
         udef sys$output 'temp_spec''iplus'.'temp_type'
      else
         if (is_out_file)		#User specified output file
            udef sys$output 'out_file'
      if (debug) {
         wse "sys$command: ", f$trnlnm("sys$command")
         wse "sys$error:   ", f$trnlnm("sys$error")
         wse "sys$input:   ", f$trnlnm("sys$input")
         wse "sys$output:  ", f$trnlnm("sys$output")
      }

      junk = f$verify(save_verify_env)
      'pipe'				#Execute the current joint of pipe
      junk = 'f$verify(f$type(pipes_verify) .nes. "")'

      if (out_append) {			#handle >>
         append /new_version 'out_file' 'append_file'
         delete 'out_file';*
      }
      if (err_append) {			#handle ??
         append /new_version 'err_file' 'err_append_file'
         delete 'err_file';*
      }

      if (i .ge. 1) 	#In a pipeline, so delete the old pipe file
         delete 'temp_spec''i'.'temp_type';* #input for command just done
      i = i + 1		#Increment temp file counter for pipes

   } while (more_pipes)
   return				#end of process_line


###i/o input redirection ("<")
###Process the current command for an input file specification.
stdin_redirect:
   len = f$length(pipe)
   pos = f$locate("<", pipe)
   if (pos .ne. len) {
      if (i .ge. 1) {	#only allow input file on beginning of a pipe
         is_in_file = false
         wse "Error: misplaced <"
         goto error_handler
      } else {		#Extract the input flag and file-spec
         is_in_file = true
         in_file = f$extract(pos + 1, len, pipe)
         pipe	 = f$extract(0, pos - 1, pipe)
         pos 	 = f$locate(" ", in_file)
         len	 = f$length(in_file)
         pipe	 = pipe + f$extract(pos, len, in_file)
         in_file = f$extract(0, pos, in_file)
      }
   } else
      is_in_file = false
   return				#Exit from processing inputfile <


###i/o output redirection (">")
###Process the current command for an output file specification.
stdout_redirect:
   len = f$length(pipe)
   pos = f$locate(">>", pipe)		#look for a >> first
   if (pos .ne. len) {
      out_append = true
      skip = 2				#a >> is 2 spaces wide
   } else {
      pos = f$locate(">", pipe)		#look for a > if >> not found
      out_append = false
      skip = 1				#a > is only 1 space wide
   }
   if (pos .ne. len) {
      if (more_pipes) {	#only allow output file on the end of a pipe
         is_out_file = false
         wse "Error: misplaced > or >>"
         goto error_handler
      } else {		#Extract the output flag and file-spec
         is_out_file = true
         out_file = f$extract(pos + skip, len, pipe)
         pipe	  = f$extract(0, pos - 1, pipe)
         pos 	  = f$locate(" ", out_file)
         len	  = f$length(out_file)
         pipe	  = pipe + f$extract(pos, len, out_file)
         out_file = f$extract(0, pos, out_file)
      }
   } else
      is_out_file = false
   if (out_append) {
      append_file = out_file		#file to append output to
      out_file = temp_spec + "app." + temp_type  #write to temp file
   }
   return				#Exit from processing outfile >


###i/o stderr redirection ("?")
###Process the current command for an stderr file specification.
stderr_redirect:
   len = f$length(pipe)
   pos = f$locate("??", pipe)
   if (pos .ne. len) {			#look for a ?? first
      err_append = true
      skip = 2				#?? is 2 wide
   } else {				#look for ? if ?? not found
      pos = f$locate("?", pipe)
      err_append = false
      skip = 1				#? is one wide
   }
   if (pos .ne. len) {			#?? or ? found
      is_err_file = true
      err_file = f$extract(pos + skip, len, pipe)
      pipe     = f$extract(0, pos - 1, pipe)
      pos      = f$locate(" ", err_file)
      len      = f$length(err_file)
      pipe     = pipe + f$extract(pos, len, err_file)
      err_file = f$extract(0, pos, err_file)
   } else
      is_err_file = false
   if (err_append) {
      err_append_file = err_file	#file to append to
      err_file = temp_spec + "err." + temp_type	#temp file to write to
   }
   return				#Exit from processing errfile ? 


###Help routine. Explain purpose and operation of this command procedure
pipes_help_routine:
   wse ""
   wse "PIPES -- This command procedure adds UNIX style piping and i/o"
   wse "         redirection to DCL.  Written in SDCL."
   wse ""
   wse "Command Line Operators:"
   wse "| -- Pipe symbol. Used to direct the output from one command to"
   wse "     the next command."
   wse "> -- Output redirection symbol.  Used to direct the output from"
   wse "     one command to a file.  Legal only on the end of a pipeline."
   wse "< -- Input redirection symbols.  Used to direct the command to take"
   wse "     input from a file. Legal only on the beginning of a pipeline."
   wse "? -- Error redirection symbols.  Used to direct the error output"
   wse "     from a command to a file."
   wse "& -- Spawn a pipeline."
   wse ">> -- Append output to a file."
   wse "?? -- Append error output to a file."
   wse "Example: "
   wse "PIPES> translit a-z @n <a.in | wordcount >words.out"
   wse "     takes the input for the translit command from the file a.in"
   wse "     and takes translit's output for the input for wordcount, and"
   wse "     stores wordcount's output in words.out."
   wse "Commands: "
   wse "EXIT  -- Exit from PIPES."
   wse "%     -- Read a literal line.  Used when quotes "" or spaces or case"
   wse "         of letters in command line is significant."
   wse "-h    -- This message."
   wse "Other -- Any valid DCL command with ALL required parameters and"
   wse "         qualfiers specified."
   wse ""
   return				#end of pipes_help_routine


###############################################################################
####Option Subroutines
###############################################################################

###INPUT option -- read input from a file
OPT$inp:
   p = f$locate("=", opt)
   l = f$length(opt)
   if (p .ne. 1) {
      input_file = f$extract(p + 1, l, opt)
      is_input_file = true
   }
   return

###TESTING option -- turn on internal debugging messages
OPT$tes:
   if (f$locate("~", opt) .ne. f$length(opt))
      debug = false
   else
      debug = true
   return

###VERIFY option -- Set VERIFY
### not really needed, since setting PIPES_VERIFY turns on internal verify now
OPT$ver:
   if (f$locate("~", opt) .ne. f$length(opt)) {
      verify = 0
   } else {
      pipes_verify = 1
      junk = f$verify(1)
   }
   return
